<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neitherland</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-13T10:02:41.110Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Oliver</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习算法分类</title>
    <link href="http://yoursite.com/2021/10/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2021/10/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB/</id>
    <published>2021-10-13T10:01:31.000Z</published>
    <updated>2021-10-13T10:02:41.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h3><a id="more"></a><p>根据 <strong>数据集</strong> 组成不同，可以把机器学习算法分为：</p><ul><li>监督学习（分类、回归）</li><li>无监督学习（聚类）</li><li>半监督学习</li><li>强化学习</li></ul><h4 id="1-监督学习"><a href="#1-监督学习" class="headerlink" title="1 监督学习"></a>1 监督学习</h4><p>定义：输入数据是由输入<strong>特征值</strong>feature 和 <strong>目标值</strong>所组成</p><ul><li><p>函数的输出(目标值)可以是一个连续的值（称为回归）</p></li><li><p>函数的输出(目标值)是有限个离散值（称为分类）</p></li></ul><h4 id="2-无监督学习"><a href="#2-无监督学习" class="headerlink" title="2 无监督学习"></a>2 无监督学习</h4><p>定义：输入数据是由输入特征值组成，<strong>没有目标值</strong></p><ul><li>输入数据没有被标记，也没有确定的结果。样本数据类别未知；</li><li>需要根据样本间的相似性对样本集进行类别划分</li></ul><h4 id="3-半监督学习"><a href="#3-半监督学习" class="headerlink" title="3 半监督学习"></a>3 半监督学习</h4><h4 id="4-强化学习"><a href="#4-强化学习" class="headerlink" title="4 强化学习"></a>4 强化学习</h4><p>定义：实质是make decisions 问题，即自动进行决策，并且可以做连续决策。</p><p>主要包含五个元素：agent, action, reward, environment, observation；</p><p>强化学习的目标就是<strong>获得最多的累计奖励</strong>。</p><table><thead><tr><th></th><th>监督学习</th><th><strong>强化学习</strong></th></tr></thead><tbody><tr><td>反馈映射</td><td>输出的是之间的关系，可以告诉算法什么样的输入对应着什么样的输出。</td><td>输出的是给机器的反馈 reward function，即用来判断这个行为是好是坏。</td></tr><tr><td>反馈时间</td><td>做了比较坏的选择会<strong>立刻反馈给算法</strong>。</td><td>结果<strong>反馈有延时</strong>，有时候可能需要走了很多步以后才知道以前的某一步的选择是好还是坏。</td></tr><tr><td>输入特征</td><td>输入是<strong>独立同分布</strong>的。（掷骰子）</td><td>面对的输入总是在变化，每当算法做出一个行为，它影响下一次决策的输入。</td></tr></tbody></table><h4 id="5-小结"><a href="#5-小结" class="headerlink" title="5 小结"></a>5 小结</h4><table><thead><tr><th align="left"></th><th align="center"><strong>In</strong></th><th align="center"><strong>Out</strong></th><th align="center"><strong>目的</strong></th><th align="center"><strong>案例</strong></th></tr></thead><tbody><tr><td align="left"><strong>监督学习</strong> <strong>(supervised learning)</strong></td><td align="center">有标签</td><td align="center">有反馈</td><td align="center">预测结果</td><td align="center">猫狗分类 房价预测</td></tr><tr><td align="left"><strong>无监督学习</strong> <strong>(unsupervised learning)</strong></td><td align="center">无标签</td><td align="center">无反馈</td><td align="center">发现潜在结构</td><td align="center">“物以类聚，人以群分”</td></tr><tr><td align="left"><strong>半监督学习</strong> <strong>(Semi-Supervised Learning)</strong></td><td align="center">部分有标签，部分无标签</td><td align="center">有反馈</td><td align="center">降低数据标记的难度</td><td align="center"></td></tr><tr><td align="left"><strong>强化学习</strong> <strong>(reinforcement learning)</strong></td><td align="center">决策流程及激励系统</td><td align="center">一系列行动</td><td align="center">长期利益最大化</td><td align="center">学下棋</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;机器学习算法分类&quot;&gt;&lt;a href=&quot;#机器学习算法分类&quot; class=&quot;headerlink&quot; title=&quot;机器学习算法分类&quot;&gt;&lt;/a&gt;机器学习算法分类&lt;/h3&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>人工智能简介</title>
    <link href="http://yoursite.com/2021/10/13/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2021/10/13/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%80%E4%BB%8B/</id>
    <published>2021-10-13T09:58:15.000Z</published>
    <updated>2021-10-13T10:01:08.471Z</updated>
    
    <content type="html"><![CDATA[<h4 id="人工智能发展必备三要素"><a href="#人工智能发展必备三要素" class="headerlink" title="人工智能发展必备三要素"></a>人工智能发展必备三要素</h4><a id="more"></a><ul><li>数据</li><li>算法</li><li>计算力<ul><li>CPU、GPU对比：<ul><li>CPU主要适合I\O密集型的任务</li><li>GPU主要适合计算密集型任务</li></ul></li></ul></li></ul><h4 id="人工智能和机器学习，深度学习的关系："><a href="#人工智能和机器学习，深度学习的关系：" class="headerlink" title="人工智能和机器学习，深度学习的关系："></a>人工智能和机器学习，深度学习的关系：</h4><ul><li>机器学习是人工智能的一个实现途径/分支</li><li>深度学习是机器学习的一个方法发展而来</li></ul><h4 id="人工智能主要分支："><a href="#人工智能主要分支：" class="headerlink" title="人工智能主要分支："></a>人工智能主要分支：</h4><ul><li>计算机视觉（CV）是指机器感知环境的能力；物体检测和人脸识别是比较成功的研究领域</li><li>语音识别；说出来的语言并将其转换成对应文本。语音识别领域任然面临着<strong>声纹识别</strong>和【<strong>鸡尾酒效应</strong>】</li><li>文本挖掘/分类；用于理解、组织、分类结构化或非结构化文本文档。</li><li>机器翻译</li><li>机器人</li></ul><h4 id="机器学习工作流程："><a href="#机器学习工作流程：" class="headerlink" title="机器学习工作流程："></a>机器学习工作流程：</h4><ol><li>获取数据</li><li>数据基本处理</li><li>特征工程</li><li>机器学习（模型训练）</li><li>模型评估<ul><li>结果达到要求，上线服务</li><li>没有达标，重新执行上面步骤</li></ul></li></ol><h4 id="数据简介："><a href="#数据简介：" class="headerlink" title="数据简介："></a>数据简介：</h4><p>在数据集D中一般：</p><ul><li>一行数据称为一个样本</li><li>一列数据称为一个特征（属性）</li><li>有些数据有目标值（标签值），有些数据没有目标值</li></ul><h4 id="特征工程："><a href="#特征工程：" class="headerlink" title="特征工程："></a>特征工程：</h4><ul><li><p>特征提取</p><p>将任意数据（文本或图像）转换为可用于机器学习的数学特征</p></li><li><p>特征预处理</p><p>通过一些转换函数将数据 转换成更加适合算法模型 对的特征数据 过程</p></li><li><p>特征降维</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;人工智能发展必备三要素&quot;&gt;&lt;a href=&quot;#人工智能发展必备三要素&quot; class=&quot;headerlink&quot; title=&quot;人工智能发展必备三要素&quot;&gt;&lt;/a&gt;人工智能发展必备三要素&lt;/h4&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>yfd实习记录 2（转折）</title>
    <link href="http://yoursite.com/2021/05/31/yfd%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-2%EF%BC%88%E8%BD%AC%E6%8A%98%EF%BC%89/"/>
    <id>http://yoursite.com/2021/05/31/yfd%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-2%EF%BC%88%E8%BD%AC%E6%8A%98%EF%BC%89/</id>
    <published>2021-05-31T02:46:00.000Z</published>
    <updated>2021-05-31T03:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>体检 + 5.28 所发生的事情</p><a id="more"></a><h3 id="pt1-体检"><a href="#pt1-体检" class="headerlink" title="pt1 体检"></a>pt1 体检</h3><p>几天前，去沙坪坝爱康国宾医院体检，体检完成后，一健传回hr，体检费用140。</p><p>体检就是常规的体检。</p><h3 id="pt2-5-28事件"><a href="#pt2-5-28事件" class="headerlink" title="pt2 5.28事件"></a>pt2 5.28事件</h3><p>5月28日下午4点多，微信的入职群和租房群被解散，然后接到一个重庆那边的电话，说猿辅导业务已满，暂停招人（借口），让我自愿放弃入职。当时我就十分的气愤，拿到offer以后，公司要求的什么，我都做了，什么都准备好了，就在入职前几天，先把微信群解散，再一个个打电话引导性的让我们放弃入职，我当时就坚决不自愿放弃入职。公司单方面毁offer，造成我的时间和金钱的损失谁来赔偿？让我相互理解？真的狗！</p><p>后来有个和我一起面试通过的小姐姐加了我微信，她是在小红书上看到的。再后来微博上面有几个人在发微博指控，就知道了是全国的猿辅导都在毁offer，hr一律不回复（有些还是回了，有些没回的可能也被开了）。后来加了全国的猿辅导维权群，里面有人提议打电话到总部去申述。第二天早上我就打电话过去申述，她那边询问我的情况和我的诉求，我就说能入职就入职，但我不放弃入职的机会！下午的时候北京那边又打来电话，又询问我的诉求，我也是说，因为一切都准备好了，这样一通电话就让我放弃入职是不可能的！欺负大学生吗？我说能入职尽量入职，到6月3号的时候，如果实在不能入职，我这边也在找另外的工作。</p><p>当天下午，收到第一次打电话让我放弃入职的那个电话号码打来，就说可以6月3号入职，说是岗位稀缺（借口），让我不要给其他人说可以入职的事情。</p><p>（因为出了这种事，所有的打工人都是受害者，所以打电话时我只是控诉了公司的这种不诚信，不透明的恶劣方式，其余的也表示无奈）</p><h3 id="pt3-气愤–冷静"><a href="#pt3-气愤–冷静" class="headerlink" title="pt3 气愤–冷静"></a>pt3 气愤–冷静</h3><p>28号上午的时候还在举行双选会，28号下午就停止招人，明显的不是因为岗位需求减少的原因，而是有什么文件下达，这种国家层面的要求我们谁也不能说什么。所以在挂断第一通电话过后，回想了一下，我又打了过去，就仔细说明了我的诉求：能正常入职就正常入职，不能那就等到6月3号再说。29号 上午的时候，我们学校居然还有人在发猿辅导招聘的广告，我加了QQ，他说可以把简历给他，我就说了我的情况，他就不说话了，然后boss直聘上还在招人，还有在线下举办招聘会的情况，我就想说这是混乱了吗？我不想搞什么阴谋论。</p><p>那个群里面真的是鱼龙混杂，居然还有人说 “与其在这维权，不如抓紧时间找下一份工作”，这种人什么成分一目了然。被毁offer的甚至有春招过来的，推掉其他很多offer过来的，错过了黄金春招，然后听信一句不如抓紧时间？？</p><p>28号-29号，因为房租的问题，我必须在那边找到实习或者兼职，我也投了作业帮、清北教育等，但这个形势下，估计也不会招人了。我在boss直聘上看了看其他职位，有工资不高，但比较轻松的。（这算是当时以及现在的备用选项）。</p><h3 id="pt4-在线教育"><a href="#pt4-在线教育" class="headerlink" title="pt4 在线教育"></a>pt4 在线教育</h3><p>这种在线教育真的，在国家的红线徘徊，谁也想不到哪一天会崩塌，然后失业。只能说，冲！考公务员！</p><h3 id="pt5-打工人真难"><a href="#pt5-打工人真难" class="headerlink" title="pt5 打工人真难"></a>pt5 打工人真难</h3><p>今天5月31号，我就想尽早入职，然后培训。毕竟培训期间是有工资的，即使说培训完过后把我开除，这下我也有准备去找下家。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;体检 + 5.28 所发生的事情&lt;/p&gt;
    
    </summary>
    
    
      <category term="实习" scheme="http://yoursite.com/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="实习" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>yfd实习记录 1</title>
    <link href="http://yoursite.com/2021/05/24/yfd%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-1/"/>
    <id>http://yoursite.com/2021/05/24/yfd%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</id>
    <published>2021-05-24T11:52:24.000Z</published>
    <updated>2021-05-24T12:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>ok！这部分算是记录的序章，入职前的一些事情记录</p><a id="more"></a><h3 id="pt1-投简历–面试"><a href="#pt1-投简历–面试" class="headerlink" title="pt1 投简历–面试"></a>pt1 投简历–面试</h3><p>5月11中午吃饭的时候，看到猿辅导的招聘暑期兼职，工资可观，回去准备准备了简历就投了。当天下午那边发回了邮件通知周四面试。收到面试通知，加了hr微信，这才去百度搜了搜猿辅导公司的位置，去b站搜了搜猿辅导面试辅导老师的一些情况，也大致了解了猿辅导面试环节中所问的问题还是比较格式化的。“自我介绍”，“对辅导老师的看法”，“面对一些问题时你会怎么做”，hr小姐姐说明了加班的必要性，关于续保的占比。我对加班没有异议，公司说13-21点，其实应该是12-22点，这个时间我也能接受。（据说续报期是9-24点）</p><h3 id="pt2-收到offer–租房"><a href="#pt2-收到offer–租房" class="headerlink" title="pt2 收到offer–租房"></a>pt2 收到offer–租房</h3><p>周五的时候就收到暑期兼职offer，入职时间是6月3号，入职的时候签订实习的劳务合同（要扣20%的税，到手4200左右），没有岗前培训，有岗后9天的培训。重庆猿辅导公司在朝天门来福士办公区A座，我在大学城这边，因为要租房子，16号的时候就和朋友一起去那边逛了逛（办公区没有权限是进不去的-..-）。19号的时候，和其他同事合租到了房子，租的3个月短租，押一付一。房子就在轻轨站出口，离来福士也10分钟左右的步行，已经很近了。</p><h3 id="pt3-packaging-stuff"><a href="#pt3-packaging-stuff" class="headerlink" title="pt3 packaging stuff"></a>pt3 packaging stuff</h3><p>这边毕业设计和论文的事情算是基本结束了。我打包了一些冬季的衣服回家，又在网上买了一些办公所需的小物品和生活小物品。过几天要去那边线下签一个东西，顺便拿到房子钥匙，还有桌子板凳配齐了没有，顺便带一些衣服过去放着，学校宿舍这边就等17号回来再陆陆续续搬走。</p><h3 id="pt4-上知乎了解辅导老师性质"><a href="#pt4-上知乎了解辅导老师性质" class="headerlink" title="pt4 上知乎了解辅导老师性质"></a>pt4 上知乎了解辅导老师性质</h3><p>说回之前面试猿辅导辅导老师的事情，我当时投简历的时候，其实已经有大概的感觉自己能过，只要自己认真准备面试问题，勇敢的去回答就好了。但真正收到offer，我才想到去真正了解辅导老师的性质，hr说70%的续报，其实很明显就是职业定位是销售性质占很大一部分。知乎上对于各大机构的辅导老师的吐槽我都大致看了看，优势就是薪资高，劣势就是工作时间长，压力很大，我暗自觉得我还是能撑住3个月的时间的。</p><h3 id="pt5-抽卡"><a href="#pt5-抽卡" class="headerlink" title="pt5 抽卡"></a>pt5 抽卡</h3><p>去b站的塔罗占卜 事件结果那个抽过两次塔罗牌。关于前期能否进入状态：海神的女儿；关于三个月工作的感受：雪中的独角兽。两张牌都是好牌。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ok！这部分算是记录的序章，入职前的一些事情记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="实习" scheme="http://yoursite.com/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="实习" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vue基础--4小时</title>
    <link href="http://yoursite.com/2021/04/16/vue%E5%9F%BA%E7%A1%80-4%E5%B0%8F%E6%97%B6/"/>
    <id>http://yoursite.com/2021/04/16/vue%E5%9F%BA%E7%A1%80-4%E5%B0%8F%E6%97%B6/</id>
    <published>2021-04-16T12:14:24.000Z</published>
    <updated>2021-04-23T02:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue基础快速复习</p><a id="more"></a><h3 id="一、vue基础"><a href="#一、vue基础" class="headerlink" title="一、vue基础"></a>一、vue基础</h3><h4 id="vue简介"><a href="#vue简介" class="headerlink" title="vue简介"></a>vue简介</h4><ol><li>javascript框架，比jquery库更强大；</li><li>更简单的DOM操作；（以前通过id获取元素，操作页面）</li><li>响应式数据驱动</li></ol><h4 id="第一个vue程序"><a href="#第一个vue程序" class="headerlink" title="第一个vue程序"></a>第一个vue程序</h4><ol><li><p>选择环境：开发环境：学习阶段使用</p><p>​                    生产环境：mini版，更轻</p></li><li><p>声明式渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123;&#125;&#125; 是插值表达式--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">        message:<span class="string">"哈哈"</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中</p><p>el：挂载点（不要挂载到html、body元素上，也不要挂载到单标签上；要挂载到双标签上&lt;p&gt;&lt;/p&gt;、&lt;div&gt;&lt;/div&gt;）</p><p>data：数据对象</p><p>methods：方法</p></li></ol><h3 id="二、本地应用"><a href="#二、本地应用" class="headerlink" title="二、本地应用"></a>二、本地应用</h3><h4 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h4><p>添加到html标签中，相当于给html标签；元素增加一个属性</p><ol><li><p>内容绑定、事物绑定</p><ul><li><p><strong>v-text</strong>：只会解析为文本；改变里面<u>所有</u>的文本</p></li><li><p><strong>v-html</strong>：内容中有html结构，会被解析为标签</p></li><li><p><strong>v-on</strong>：绑定事件,可简写为@；@click = “”; @mouseenter=””;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"单击"</span> @<span class="attr">click</span>=<span class="string">"btn1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">        message:<span class="string">"哈哈"</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="actionscript">        btn1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.message = <span class="string">"嘻嘻嘻嘻！"</span>,<span class="comment">// 方法内部通过this，访问data中的数据</span></span></span><br><span class="line"><span class="actionscript">           alert(<span class="string">"单击，我被弹出！"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>显示切换、属性绑定</p><ul><li><p><strong>v-show</strong>=“true/false”；布尔值；通过操纵样式；display:none；<strong>会导致重绘</strong></p><p>v-show=”isShow” ；在vue实例中的data数据对象里面写 isShow:false</p></li><li><p><strong>v-if=“表达式/数据对象”</strong> ； 根据表达式的真假，切换元素的显示和隐藏（操作dom元素）；<strong>会导致重绘和重排</strong></p></li><li><p><strong>v-bind</strong>；设置单个元素的属性（比如 src title class）</p><p>比如说给图片增加属性就用  v-bind : src = “数据对象”；然后v-bind可以省略；:src,  <u>:title</u>(<u>鼠标悬停显示出信息</u>), :class</p></li></ul></li><li><p>列表循环、表单元素绑定</p><ul><li><p><strong>v-for</strong>；循环生成列表结构；通常和<u>数组</u>结合使用</p><p>v-for=”(item,index) in arr”  <u>index 是索引</u>；其中arr也可以是复杂数组对象；item.name、item.age去访问</p></li><li><p>*<em>v-on *</em>补充（事件）</p><p>可以传参；@click=”add(2,5)”；后面对应方法加形参；@keyup.enter=“sayHi”；敲回车键时会执行sayHi方法</p></li><li><p><strong>v-model</strong></p><p>双向数据绑定，设置<strong>表单元素</strong>的值； input 、select 、checkbox 、textarea</p><p>&lt;input type=”text” v-model=”msg”&gt;; data:{ msg:”双向绑定的数据” } </p></li></ul></li></ol><h4 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h4><p>v-for 渲染数组列表；根据数组形成列表结构</p><p>v-model 获取用户输入的数据；</p><p>v-on 绑定事件，@keyup.enter=”add”回车，add方法中新增数据；</p><p>​                            删除数据：@click：”remove(index)”；方法中写：this.lists.splice(index,1)</p><h3 id="三、网络应用"><a href="#三、网络应用" class="headerlink" title="三、网络应用"></a>三、网络应用</h3><p>ajax、promise 、.then、 axios</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue基础快速复习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>重绘和重排</title>
    <link href="http://yoursite.com/2021/04/13/%E9%87%8D%E7%BB%98%E5%92%8C%E9%87%8D%E6%8E%92/"/>
    <id>http://yoursite.com/2021/04/13/%E9%87%8D%E7%BB%98%E5%92%8C%E9%87%8D%E6%8E%92/</id>
    <published>2021-04-13T15:36:02.000Z</published>
    <updated>2021-04-14T08:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML页面进行重绘和重排（回流）</p><a id="more"></a><h3 id="浏览器运行机制："><a href="#浏览器运行机制：" class="headerlink" title="浏览器运行机制："></a>浏览器运行机制：</h3><ol><li>构建DOM树    生成内容树（html结构）</li><li>构建渲染树      css样式</li><li>布局渲染树      从根节点(&lt;html&gt;)递归调用，计算每一个元素的大小，位置等；给出每个节点所在屏幕上出现的确定坐标</li><li>绘制渲染树      遍历渲染树，使用UI层来绘制每个节点</li></ol><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>​        重绘指的是，一个元素外观（颜色、背景）的改变，所触发的浏览器行为，即浏览器会根据新属性重新绘制页面</p><h3 id="重排（回流）"><a href="#重排（回流）" class="headerlink" title="重排（回流）"></a>重排（回流）</h3><p>​        重排指的是，一个元素或多个元素因为规模尺寸、布局、隐藏等改变页面需要重新构建页面。注意：每个页面至少需要回流一次，就是第一次加载的时候。</p><p>重排一定会导致重绘！！重排和重绘都会导致浏览器速度变慢！</p><h3 id="优化方法："><a href="#优化方法：" class="headerlink" title="优化方法："></a>优化方法：</h3><ol><li>浏览器自己的优化：浏览器会维护1个队列，把所有会引起重绘和重拍的操作放在队列中，达到一定数量或者一定时间间隔，浏览器就会更新队列，进行一次批处理。（维护队列，后批处理）</li><li>我们要注意的优化：减少对渲染树的操作，我们可以合并多次DOM和样式的修改，并减少对style样式的请求<ul><li>直接改变元素的className</li><li>需要多次重排的元素，position可以改为 absolute 或 fixed 。元素脱离了文档流，他的变化不会影响到其他元素了</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML页面进行重绘和重排（回流）&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>The farewell</title>
    <link href="http://yoursite.com/2021/03/09/The-farewell/"/>
    <id>http://yoursite.com/2021/03/09/The-farewell/</id>
    <published>2021-03-09T03:33:53.000Z</published>
    <updated>2021-04-13T15:34:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>纽约一声大喝，惊扰长春飞鸟</p><a id="more"></a><p>YOU THINK ONE’S LIFE BELONGS TO ONESELF.</p><img src="/2021/03/09/The-farewell/t1.jpg" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纽约一声大喝，惊扰长春飞鸟&lt;/p&gt;
    
    </summary>
    
    
      <category term="电影" scheme="http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>5 选择结构程序设计</title>
    <link href="http://yoursite.com/2020/06/28/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2020/06/28/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-06-28T01:35:43.000Z</published>
    <updated>2021-04-13T14:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>关系运算符和关系表达式、逻辑运算符和逻辑表达式、if语句、switch语句</p><a id="more"></a><h4 id="考点1-关系运算符和关系表达式"><a href="#考点1-关系运算符和关系表达式" class="headerlink" title="考点1 关系运算符和关系表达式"></a>考点1 关系运算符和关系表达式</h4><h5 id="关系运算符及其优先次序"><a href="#关系运算符及其优先次序" class="headerlink" title="关系运算符及其优先次序"></a>关系运算符及其优先次序</h5><ul><li><p>&lt;、&lt;=、&gt;、&gt;=；优先级相同（高）</p></li><li><p>==、!=；优先级相同（低）</p><p>说明：关系运算符的优先级低于算术运算符 + - * / %</p><p>高于赋值运算符 = 。</p></li></ul><h5 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h5><ul><li><p>用关系运算符将两个表达式连接起来的式子，称关系表达式。</p><p>eg：a&gt;b, a+b&gt;b+c, (a=3)&gt;(b=5), ‘a’&lt;’b’, (a&gt;b)&gt;(b&lt;c)</p></li><li><p>关系表达式的值是一个<strong>逻辑值</strong>，即“真” “假”。</p><p>eg：a&gt;b的值为“真”，那么关系表达式的值为1；1代表真,0代表假。</p></li></ul><h4 id="考点2-逻辑运算符和逻辑表达式"><a href="#考点2-逻辑运算符和逻辑表达式" class="headerlink" title="考点2 逻辑运算符和逻辑表达式"></a>考点2 逻辑运算符和逻辑表达式</h4><h5 id="逻辑运算符及其优先次序"><a href="#逻辑运算符及其优先次序" class="headerlink" title="逻辑运算符及其优先次序"></a>逻辑运算符及其优先次序</h5><ul><li><p>&amp;&amp;  AND</p></li><li><p>|| OR</p></li><li><p>！ NOT</p><p>优先次序：&amp;&amp; 和 || 低于关系运算符；！高于算术运算符。</p></li></ul><h5 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h5><ul><li><p>用逻辑运算符将关系表达式或逻辑量连接起来的式子就是逻辑表达式。逻辑表达式的值也是一个<strong>逻辑值</strong>，即“真” “假”</p><p>eg：5&gt;3&amp;&amp;8&lt;4-!0</p><p>5&gt;3为真1  4-!0为3 8&lt;3为假0 最后 1并0 为0</p></li><li><p><strong>！！！</strong>在逻辑表达式的求解中，并不是所有的逻辑运算符都要被执行</p><ul><li><p>a&amp;&amp;b&amp;&amp;c，只有a为真时，才需要判断b的值，只有a和b的值都为真时，才需要判断c的值。</p></li><li><p>a||b||c，只要a为真，就不判断b和c的值，只有a为假，才判断b。a和b都为假，才判断c。</p><p>eg：(m=a&gt;b)&amp;&amp;(n=c&gt;d)</p><p>当 a = 1，b = 2，c = 3，d = 4，m和n的原值为1时，由于a&gt;b为假0，所以m=0，那么整个表达式为0，后面不用执行计算，即最后m=0，n=1。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关系运算符和关系表达式、逻辑运算符和逻辑表达式、if语句、switch语句&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>4 C语句概述</title>
    <link href="http://yoursite.com/2020/06/27/%E7%AC%AC%E5%9B%9B%E7%AB%A0-C%E8%AF%AD%E5%8F%A5%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2020/06/27/%E7%AC%AC%E5%9B%9B%E7%AB%A0-C%E8%AF%AD%E5%8F%A5%E6%A6%82%E8%BF%B0/</id>
    <published>2020-06-27T04:26:15.000Z</published>
    <updated>2021-04-13T14:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>概述，赋值语句，输入输出，格式输出等</p><a id="more"></a><h4 id="考点1-C语言概述"><a href="#考点1-C语言概述" class="headerlink" title="考点1 C语言概述"></a>考点1 C语言概述</h4><p>一个C程序可以由若干个源程序文件 test.c test2.c test3.c … 组成</p><p>一个源文件可以由若干个函数和预处理命令以及全局变量声明组成</p><p>一个函数由函数首部和函数体组成</p><p>函数体由数据声明和执行语句组成</p><img src="/2020/06/27/%E7%AC%AC%E5%9B%9B%E7%AB%A0-C%E8%AF%AD%E5%8F%A5%E6%A6%82%E8%BF%B0/C%E7%A8%8B%E5%BA%8F.svg" class><p>C语句的5种类型：</p><img src="/2020/06/27/%E7%AC%AC%E5%9B%9B%E7%AB%A0-C%E8%AF%AD%E5%8F%A5%E6%A6%82%E8%BF%B0/C%E8%AF%AD%E5%8F%A5.svg" class><h4 id="考点2-赋值语句"><a href="#考点2-赋值语句" class="headerlink" title="考点2 赋值语句"></a>考点2 赋值语句</h4><ul><li><p>赋值语句 = 赋值表达式 + ；</p><p>a = 100 赋值语句</p><p>a = 100；赋值表达式</p></li><li><p>条件中不能含有赋值符号，但是赋值表达式可以包含于条件表达式中：</p><p>if (a=b)  t = a; 错误</p><p>if ((a=b)=&gt;0) t = a; <strong>正确</strong></p></li></ul><h4 id="考点3-数据输入输出概念以及C语言中的实现"><a href="#考点3-数据输入输出概念以及C语言中的实现" class="headerlink" title="考点3 数据输入输出概念以及C语言中的实现"></a>考点3 数据输入输出概念以及C语言中的实现</h4><ul><li><p>输出：从计算机向外部输出设备（显示器、打印机）</p></li><li><p>输入；从输入设备（键盘 鼠标 扫描仪）向计算机输入数据</p></li><li><p>C语言本身不提供输入数据语句；是由C函数库中的函数来实现的</p></li><li><p>使用库函数时，需要用预编译命令 “#include” 将有关的 “头文件” 包含到用户源文件中</p></li></ul><h4 id="考点4-字符数据的输入输出"><a href="#考点4-字符数据的输入输出" class="headerlink" title="考点4 字符数据的输入输出"></a>考点4 字符数据的输入输出</h4><ul><li><p>字符输出函数</p><p>一般形式：putchar(c)  （c为字符型变量 char c；或整型变量）</p><p>函数作用： 向终端输出一个字符</p></li><li><p>字符输入函数</p><p>一般形式：getchar(c)</p><p>函数作用：从终端（或系统隐含指定的输入设备）输入一个字符</p><p>函数值：从输入设备得到的字符</p></li></ul><h4 id="考点5-格式输入与输出"><a href="#考点5-格式输入与输出" class="headerlink" title="考点5 格式输入与输出"></a>考点5 格式输入与输出</h4><ul><li><p>格式输出函数</p><p>一般格式：printf（格式控制，输出表列）。</p><p>函数作用：向终端（或系统隐含指定的输出设备）输出若干个任意类型的数据。</p></li><li><p>格式控制 格式符：</p><img src="/2020/06/27/%E7%AC%AC%E5%9B%9B%E7%AB%A0-C%E8%AF%AD%E5%8F%A5%E6%A6%82%E8%BF%B0/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6.svg" class></li><li><p>几种常见的格式符的修饰符：</p><p>L：用于长整型整数，可以加在格式符d o x u前面；</p><p>M（代表一个正整数）：数据<strong>最小宽度</strong>；</p><p>N（代表一个正整数）：对实数，表示<strong>输出n位小数</strong>；对字符串，表示<strong>截取的字符个数</strong></p><p>—：输出的数字或字符在域内向左靠</p></li><li><p>d格式符</p><ul><li><p>%d：按十进制整型数据的实际长度输出</p></li><li><p>%md；m为指定的输出字段宽度</p><p>如果数据位数小于m，则左端补以空格</p><p>如果数据位数大于m，则按实际位数输出；</p></li><li><p>%ld：输出长整型数据</p></li></ul></li><li><p>o格式符</p><p>输出的数值不带符号，符号位作为八进制数的一部分输出，不会出现负的十六进制数。</p></li><li><p>x格式符</p><p>以十六进制形式输出整数，同样不会出现负的十六进制数。</p></li><li><p>u格式符</p><p>用来输出unsigned型数据，一个有符号整数int型也可以用%u格式输出；</p><p>一个unsigned型数据也可以用%d格式输出</p><p>unsigned型数据也可以用%o %x格式输出</p></li><li><p>c格式符：输出一个字符</p><p>如：char d = ‘a’;</p><p>​        printf(“%c”,d);</p><p>输出字符’a’.</p><p>一个整数，只要他的值在0~255范围内，可以用“%c”使之按字符形式输出，在输出前，系统会将该整数作为ASCII码转换成响应的字符。一个字符数据也可以用整数形式输出。</p><p>eg1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">65535</span>;<span class="keyword">int</span> b = <span class="number">-2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d,%o,%x,%u\n"</span>,a,a,a,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b=%d,%o,%x,%u\n"</span>,b,b,b,b);</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">    a=<span class="number">-1</span>,<span class="number">177777</span>,ffff,<span class="number">65535</span></span><br><span class="line">    b=<span class="number">-2</span>,<span class="number">177776</span>,fffe,<span class="number">65534</span></span><br></pre></td></tr></table></figure><p>eg2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>; <span class="comment">// 字符a对应的ASCII码为97</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">97</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c,%d\n"</span>,c,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c,%d\n"</span>,i,i);</span><br><span class="line">&#125;</span><br><span class="line">运行结果： </span><br><span class="line">    a,<span class="number">97</span></span><br><span class="line">    a,<span class="number">97</span></span><br></pre></td></tr></table></figure></li><li><p>s格式符：输出字符串</p><ul><li><p>%s </p><p>printf（“%s”，“CHINA”）</p><p>输出字符串 ”CHINA“（不包括双引号）</p></li><li><p>%ms</p><p>输出的字符串占m列（控制字符串宽度），若串长度大于m，则全部输出，若串长度小于m，则左补空格</p></li><li><p>%-ms</p><p>同理上面，但字符串向左靠，右补空格</p></li><li><p>%m.ns</p><p>输出占m列，只取字符串中左端n个字符 输出在m列的右侧，左补空格</p></li><li><p>%-m.ns</p><p>n个字符输出在m列的左侧，右补空格</p></li><li><p>若n &gt;m ,m自动取n值</p></li></ul><p>eg3：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%3s,%7.2s,%.4s,%-5.3s\n"</span>,<span class="string">"CHINA"</span>,<span class="string">"CHINA"</span>,<span class="string">"CHINA"</span>,<span class="string">"CHINA"</span>);</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">    CHINA,     CH,CHIN,CHI  ;</span><br></pre></td></tr></table></figure></li><li><p>f格式符：以小数形式输出实数（包括单双精度）</p><ul><li><p>%f</p><p>不指定字段宽度，由系统自动指定字段宽度，使整数部分全部输出，并输出6位小数。应当注意，在输出的数字中，并非全部数字都是有效数字。<strong>单精度实数</strong>的有效数位一般为<strong>7位</strong>。</p></li><li><p>%m.nf</p><p>指定输出的数据共占m列，其中有n个小数，如果数值长度小于m，则左端补空格。</p></li><li><p>%-m.nf</p><p>输出值向左端靠，右端补空格</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">123.456</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f,%10f,%10.2f,.2f%,%-10.2f\n"</span>,f,f,f,f,f);</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">123.455994</span>,<span class="number">123.455994</span>,    <span class="number">123.46</span>,<span class="number">123.46</span>,<span class="number">123.46</span>    ;</span><br></pre></td></tr></table></figure></li><li><p>e格式符：以指数形式输出实数</p><ul><li><p>%e 不指定输出数据所占的宽度和数字部分的小数位数</p><p>printf(“%e”,123.256);</p><p>输出：</p><p><u>1.234560</u> <u>e+002</u>（8列+5列）</p><p>所输出的实数共占13列宽度（注：不同系统的规定略有不同）</p></li><li><p>%m.ne和%-m.ne</p><p>m、n和—字符的含义与前面相同，此处n指拟输出的数据的小数部分（又称尾数）的小数尾数</p><p>f = 123.456</p><p>printf(“%e,%10e,%10.2e,%.2e,%-10.2e”,f,f,f,f,f);</p><p>输出：</p><p>1.234560e+002, 1.234560e+002, 1.23e+002 (5+5列，左补空格),</p><p>1.23e+002 (4+5列), 1.23e+002 ;(4+6列，右补空格)</p><p><u>说明</u>：未指定n，自动使n = 6</p></li></ul></li><li><p>g格式符：用来输出实数</p><p>根据数值的大小，自动选f格式或e格式，选择占宽度较小的一种，且不输出无意义的零</p><p><u>说明</u>：用%f格式输出占10列，用%e格式输出占13列</p></li></ul><p>注：除了X E G外，其他格式符必须用小写，可以在<code>printf</code>函数中的“格式控制”字符串中包含转义字符。</p><p>一个格式说明必须以 % 开头，以9个格式字符之一为结束，中间可以插入附加格式字符。想输出百分号%，那应该在格式控制字符串中用两个%表示。</p><ul><li><p>格式输入函数</p><p>一般格式：scanf（格式控制，地址列表）。</p><p>函数作用：按照变量在内存的地址将变量值存进去。</p><p>地址表列：是由若干个地址组成的表列，可以是变量的地址，或字符串的首地址</p></li><li><p>使用scanf函数时注意的问题：</p><ol><li>scanf函数中的“格式控制”后面应当是变量地址 &amp;a..要加地址运算符，而不是变量名。</li><li>如果在“格式控制”字符串中除了格式说明以外还有其他字符，则在输入数据时在对应位置应输入与这些字符相同的字符。</li><li>在用“%c” 格式输入字符时，空格字符和“转义字符”都作为有效字符输入</li><li>在输入数据时，遇以下情况时，认为该数据结束<ul><li>遇空格，或按回车 或Tab</li><li>按指定的宽度结束 %3d，只取3列</li><li>遇非法输入</li></ul></li></ol></li></ul><h4 id="主要知识点"><a href="#主要知识点" class="headerlink" title="主要知识点"></a>主要知识点</h4><p>字符数据的输入输出函数</p><p>格式输入输出函数：9个格式控制符的使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概述，赋值语句，输入输出，格式输出等&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>3 数据类型、运算符和表达式</title>
    <link href="http://yoursite.com/2020/06/24/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/06/24/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-06-24T03:36:01.000Z</published>
    <updated>2021-04-13T14:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>第三章 数据类型、运算符和表达式</p><a id="more"></a><h4 id="考点1-C的数据类型"><a href="#考点1-C的数据类型" class="headerlink" title="考点1 C的数据类型"></a>考点1 C的数据类型</h4><img src="/2020/06/24/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.svg" class><h4 id="考点2-常量与变量"><a href="#考点2-常量与变量" class="headerlink" title="考点2 常量与变量"></a>考点2 常量与变量</h4><ol><li><p>常量</p><ul><li>常量：在程序运行过程中，其值不能被改变的量</li><li><strong>字面常量</strong>：直观上就是常量</li><li><strong>const 修饰的常变量</strong>：本质是变量，但具有常量的属性</li><li><strong>#define 定义的常量</strong></li><li><strong>枚举常量</strong></li></ul></li><li><p>变量</p><ul><li>代表内存中具有特定属性的一个存储单元，用来存放数据，在程序运行期间，值是可以改变的。</li><li><strong>变量名</strong>实际上是一个以一个名字<strong>代表</strong>的<strong>一个地址</strong>，在对程序编译连接时，由编译系统给每一个变量名分配对应的内存地址。</li><li>从变量中取值，实际上是通过<strong>变量名</strong>找到相应的<strong>内存地址</strong>，从该<strong>存储单元</strong>中读取数据。</li><li><strong>变量命名规则</strong>：<strong>字母、数字、下划线</strong>三种字符组成，第一个字符不能为数字！<u>关键字不能被命名！</u></li></ul></li></ol><h4 id="考点3-整型数据"><a href="#考点3-整型数据" class="headerlink" title="考点3 整型数据"></a>考点3 整型数据</h4><ol><li><p>整型常量的表示方法</p><ul><li>十进制整数。如：123，-54，4</li><li>八进制整数。</li><li>十六进制整数。</li></ul></li><li><p>整型变量</p><ul><li><p>整型数据在内存中存放形式：以二进制形式存放</p><p>如int i； // 定义为整型变量</p><p>i = 10；  // 给 i 赋以整数10</p><blockquote><p>注意：不同的编译系统为整型数据分配的字节是不同的 2 / 4 B</p></blockquote></li><li><p>整型变量的分类：</p><ul><li><p>有符号基本整型    （signed）int</p></li><li><p>有符号短整型   （signed）short （int）</p></li><li><p>有符号长整型   （signed）long（int）</p></li><li><p>无符号基本整型    unsigned int</p></li><li><p>无符号短整型    unsigned  short（int）</p></li><li><p>无符号长整型    unsigned long（int）</p><blockquote><p>注意：括号表示其中的内容是可选的；不同种类的整型数据可以进行算术运算</p></blockquote></li></ul></li><li><p>整型变量的定义：</p><p>C规则所有用到的变量都必须在程序中定义，即“强制类型定义”</p><p>eg：int a，b；（指定变量a、b为整型）</p><p>unsigned short c，d；（指定变量c、d为无符号短整型）</p></li></ul></li><li><p>整型常量类型</p><ul><li>一个整数，如果其值在-32768~+32767范围内，为它是int型，它可以赋值给 int 型和long int 型变量。</li><li>一个整数，如果其值超过了上述范围，在-2147483648~+2147483647范围内，则认为它为长整型，赋值给long int型变量</li><li>一个整常量后面加一个字母U 或 u，认为是unsigned int 类型。在内存中按unsigned int规定的方式存放（存储单元中最高位不作为符号位，而用来存储数据）</li><li>一个整常量后面加一个字母L 或 l，即认为是long int类型</li></ul></li></ol><h4 id="考点4-浮点型数据运行"><a href="#考点4-浮点型数据运行" class="headerlink" title="考点4 浮点型数据运行"></a>考点4 浮点型数据运行</h4><ol><li><p>浮点型常量的表示方法</p><p>两种表示形式：小数 0.123；指数 3e-3</p><blockquote><p>注意：字母e或者E之前必须有数字，且e后面的指数必须为整数</p></blockquote></li><li><p>浮点型变量</p><ul><li>浮点型数据在内存中的存放形式：一个浮点型数据一般在内存中<strong>占4个字节</strong>，32bit。与整数数据存储方式不同，浮点型数据按照<strong>指数形式</strong>存储。系统把浮点型数据分为小数部分和指数部分</li><li>三种分类：单精度float；双精度double；长双精度long double</li><li>浮点型数据的舍入误差；浮点型只能保证有效数字为7位，所以避免一个很大的数和一个很小的数直接相加或相减，不然会“丢失”小的数</li></ul></li><li><p>浮点型常量的类型</p><p>C编译系统将浮点型常作为双精度double来处理</p></li></ol><h4 id="考点5-字符型数据"><a href="#考点5-字符型数据" class="headerlink" title="考点5 字符型数据"></a>考点5 字符型数据</h4><ol><li><p>字符常量</p><ul><li>用<strong>单引号</strong>包含的一个字符，就叫做字符常量</li><li>只能包含一个字符</li><li>有些以“\”开头的特殊字符称为<strong>转义字符</strong><ul><li>\n 换行</li><li>\t 横向跳格</li><li>\r 回车</li><li>\\ 反斜杠</li><li>\ddd ddd代表1到3位八进制数字表示字符</li><li>\xhh hh表示1到2位十六进制数字表示字符</li></ul></li></ul></li><li><p>字符变量</p><p>字符型变量用来存放字符常量，注意只能放一个字符</p><p>字符变量的定义形式如下：</p><p>char c1，c2;</p><p>可以用 c1 = ‘a’；c2 = ‘b’；来赋值；</p><p>一个字符变量在内存中占一个字节；</p></li><li><p>字符串常量</p><p>字符串常量是一对<strong>双引号</strong>括起来的字符序列</p><p>“How do you do” “hello” “a”</p><p>不能把一个字符串常量赋值给一个字符变量</p><p>C规定，以字符 <strong>‘\0’ 作为字符串结束标志</strong>。这个结束标志是会和字符串数据存到内存中的，占一个bit</p></li></ol><h4 id="考点6-变量赋初值"><a href="#考点6-变量赋初值" class="headerlink" title="考点6 变量赋初值"></a>考点6 变量赋初值</h4><ol><li><p>C语言运行在定义变量的同时，变量初始化!</p><p>例如：</p><p>int a = 1；</p><p>float f = 3.56；</p><p>char c = ‘a’；  //指定c为字符变量，初值为‘a’</p></li></ol><h4 id="考点7-各类数值型数据间的混合运算"><a href="#考点7-各类数值型数据间的混合运算" class="headerlink" title="考点7 各类数值型数据间的混合运算"></a>考点7 各类数值型数据间的混合运算</h4><p>整型（包括int short long）、浮点型（包括float、double）可以混合运算。在进行运算时，不同类型的数据，要先转换成同一类型，再计算。是由系统自动转换的。</p><h4 id="考点8-算数运算符和算数表达式"><a href="#考点8-算数运算符和算数表达式" class="headerlink" title="考点8 算数运算符和算数表达式"></a>考点8 算数运算符和算数表达式</h4><ol><li><p>C的运算符有以下几类：</p><ul><li>算数运算符：+-*/%</li><li>关系运算符：&gt;，&lt;，==，&gt;=，&lt;=，！=</li><li>逻辑运算符：！&amp;&amp; ||</li><li>位运算符：&lt;&lt;&gt;&gt; ~ | ^ &amp;</li><li>赋值运算符：=</li><li>条件运算符：？：（三目运算符，条件运算符；max = （a&gt;b）?a:b ）</li><li>逗号运算符：，</li><li>指针运算符：* &amp;</li><li>求字节数运算符：sizeof</li><li>强制类型转换运算符：（类型）</li><li>分量运算符：.-&gt;</li><li>下标运算符： []  ；查询数组的某个元素</li><li>其他：函数调用</li></ul></li><li><p>算数表达式和运算符的优先级</p></li><li><p>强制类型转换</p><p> (int)x；(float)(a+b)</p></li><li><p>自增自减</p></li></ol><h4 id="考点9-赋值运算符和赋值表达式"><a href="#考点9-赋值运算符和赋值表达式" class="headerlink" title="考点9 赋值运算符和赋值表达式"></a>考点9 赋值运算符和赋值表达式</h4><p>a = 3 ；将3赋值给变量a；或将一个表达式赋值给变量a</p><p>如果赋值运算两侧类型不一致，但都是数值型或字符型时，在赋值时要进行类转换</p><ul><li><p>将浮点型数据（单/双精度）赋值给整型变量时，舍弃浮点数的小数部分；即如果i为int型，那么i = 3.56，那么i的值最终为3，以整数形式存储在整型变量中</p></li><li><p>将整型数据赋值给单、双精度变量时，数值不变，但是以浮点数形式存储到变量中（有效位边长，内存分配的地址空间不同）</p></li><li><p>double赋值给float，注意数值范围不能溢出</p></li><li><p>%u 是输出无符号数时所用的格式符。如果b为正值，且在0-32767之前，则复制后数据不变</p></li><li><p>一个表达式有有一个值 ：a = 1+ 2；a = （b = 5）和 a = b = 5等价</p><p>其中变量可以作为左值</p><p>表达式不能作为左值</p><p>赋值表达式可以在左值</p><p>常变量也不能作为左值</p></li></ul><h4 id="考点10-逗号运算符和逗号表达式"><a href="#考点10-逗号运算符和逗号表达式" class="headerlink" title="考点10 逗号运算符和逗号表达式"></a>考点10 逗号运算符和逗号表达式</h4><p>顺序求值运算符</p><p>一般形式：表达式1，表达式2</p><p>先求表达式1，再求表达式2，整个逗号表达式的值是<strong>表达式2的最终结果</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章 数据类型、运算符和表达式&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/24/hello-world/"/>
    <id>http://yoursite.com/2020/06/24/hello-world/</id>
    <published>2020-06-24T03:00:14.000Z</published>
    <updated>2020-06-24T03:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>Hexo -&gt; source -&gt; _data -&gt; styles.styl</p><p>开发者模式调试样式，然后复制样式名，粘贴到这里来，就可以覆盖原来的样式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2 算法</title>
    <link href="http://yoursite.com/2020/06/24/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/06/24/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%AE%97%E6%B3%95/</id>
    <published>2020-06-24T01:05:36.000Z</published>
    <updated>2021-04-13T14:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二章 算法</p><a id="more"></a><h4 id="考点1-算法的概念"><a href="#考点1-算法的概念" class="headerlink" title="考点1 算法的概念"></a>考点1 算法的概念</h4><ul><li><p>对数据的描述：数据结构</p></li><li><p>对操作的描述：算法; (解决某个事件的步骤！)</p></li><li><p><strong>程序 = 数据结构 + 算法</strong></p></li><li><p>计算机算法可分为两大类：数值运算算法和非数值运算</p></li></ul><blockquote><p>经典两个例题：</p><p>判断闰年： 能被4整除，但不能被100整除 || 能被100整除，又能被400整除</p><p>判断是否为素数 n(n&gt;=3)：将n 作为被除数，将2 到 根号n 各个整数轮流作为除数，如果都不能被整除，则n 为素数</p></blockquote><h4 id="考点2-算法的5大特性"><a href="#考点2-算法的5大特性" class="headerlink" title="考点2 算法的5大特性"></a>考点2 算法的5大特性</h4><p>一个算法应该具有5个特性（只有满足5个特性的，才叫做算法！）</p><ul><li>有穷性：有限步骤，有限时间</li><li>确定性</li><li>有效性：被除数不为0等</li><li>有输入</li><li>有输出</li></ul><h4 id="考点3-算法的表示"><a href="#考点3-算法的表示" class="headerlink" title="考点3 算法的表示"></a>考点3 算法的表示</h4><ul><li><p>用<strong>自然语言</strong>表示算法 OUT</p></li><li><p>用<strong>流程图</strong>表示算法；（流程图要会画！！很重要的）</p><p>包括：起止框、处理框、判断框、输入输出框、流程线、连接点、注释框</p><p>优点：用流程图表示算法要比文字描述算法逻辑清晰，易于理解</p><p>一个流程图包括以下几部分：</p><ul><li><p>表示响应操作的框；</p></li><li><p>带箭头的流程线</p></li><li><p>框内外必要的文字说明</p></li></ul></li><li><p><strong>三种基本结构</strong></p><p>顺序结构、选择结构、循环结构</p></li><li><p>用<strong>N-S流程图</strong>表示算法</p></li><li><p>用<strong>伪代码</strong>表示算法</p></li><li><p>用<strong>计算机语言</strong>表示算法 C语言</p><ul><li>概念：计算机无法识别流程图和伪代码。只有用计算机语言编写的程序才能被计算机执行。因此在用流程图或伪代码描述出一个算法后，还要讲他转换成计算机语言程序。</li><li>特點：用计算机语言表示算法必须严格遵循所用的语言和语法规则</li><li>用处：要完成一件工作，包括设计算法和实现算法两个部分，设计算法的目的是为了实现算法。</li></ul></li></ul><h4 id="考点4-结构化程序设计方法"><a href="#考点4-结构化程序设计方法" class="headerlink" title="考点4 结构化程序设计方法"></a>考点4 结构化程序设计方法</h4><ul><li><p>一个结构化程序：用三中基本结构组成的程序必然是结构化的程序，便于编写、便于阅读、修改和维护。</p></li><li><p><strong>基本思路</strong>：把复杂问题求解过程分阶段进行，每个阶段出的问题都要简单明了</p></li><li><p>采取以下两种方法实现结构化的程序：</p><ul><li>自顶向下，逐步细化；（常用这个）</li><li>自下而上，逐步积累；</li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>主要知识点：<strong>算法的表示</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二章 算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>1 考情分析</title>
    <link href="http://yoursite.com/2020/06/23/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%80%83%E6%83%85%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/06/23/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%80%83%E6%83%85%E5%88%86%E6%9E%90/</id>
    <published>2020-06-23T01:08:25.000Z</published>
    <updated>2021-04-13T14:59:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>考情分析、复习方法和概述 + 第一章</p><a id="more"></a><h4 id="考情分析"><a href="#考情分析" class="headerlink" title="考情分析"></a>考情分析</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>算法的概述及其表示</td><td>预处理命令</td></tr><tr><td><strong>数据类型、运算符与表达式</strong></td><td><strong>结构体</strong>、共同体、枚举类型</td></tr><tr><td><strong>程序设计结构</strong></td><td>位运算、位段</td></tr><tr><td><strong>数组</strong></td><td><strong>文件</strong></td></tr><tr><td><strong>函数</strong></td><td></td></tr><tr><td><strong>指针</strong></td><td></td></tr></tbody></table><h4 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h4><ul><li><p>认真复习每个知识点，掌握C语言规则</p><p>例如：针对字符数组和字符指针变量</p></li><li><p>对于容易混淆的知识点，善于归纳和总结</p><p>例如：有关整型的数据类型</p><table><thead><tr><th>定义</th><th>含义</th></tr></thead><tbody><tr><td>int p;</td><td>定义整型变量p</td></tr><tr><td>int *p;</td><td>p为指向整型数据的指针变量</td></tr><tr><td>int p[n];</td><td>定义整型数组p，它有n个元素</td></tr><tr><td>int *p[n];</td><td>定义指针数组p，它由n个指向整型数据的指针元素组成</td></tr><tr><td>int (*p)[n];</td><td>p为指向含n个元素的以为数组的指针变量</td></tr><tr><td>int p();</td><td>p为返回整函数值的函数</td></tr><tr><td>int *p();</td><td>p为返回一个指针的函数，该指针指向整型数据</td></tr><tr><td>int (*p)();</td><td>p为指向函数的指针，该函数返回一个整型值</td></tr><tr><td>int **p;</td><td>p是一个指针变量，它指向一个指向整型数据的指针变量</td></tr></tbody></table></li><li><p>培养认真分析的习惯，建立地址分配模型</p></li></ul><h4 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h4><h5 id="C语言的历史背景"><a href="#C语言的历史背景" class="headerlink" title="C语言的历史背景"></a>C语言的历史背景</h5><p>高级语言</p><h5 id="C语言的特点"><a href="#C语言的特点" class="headerlink" title="C语言的特点"></a>C语言的特点</h5><ul><li>语言简介、紧凑、使用方便、灵活。32个关键字、9个控制语句</li><li>34种运算符</li><li>数据类型丰富，具有现代语言的各种数据结构</li><li>具有结构化的控制语句，是完全模块化和结构化的语言</li><li>语法限制不严格，程序设计自由度大</li><li>允许直接访问物理地址，能进行位操作，能实现汇编语言的大部分功能，可直接对硬件进行操作</li><li>目标代码质量高，程序执行效率高</li><li>程序可移植性好。基本不用修改就用于各种型号的计算机和各种操作系统</li></ul><h5 id="简单的C语言程序"><a href="#简单的C语言程序" class="headerlink" title="简单的C语言程序"></a>简单的C语言程序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#includ <span class="meta-string">&lt;stdio.h&gt;/*文件包含*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">/*主函数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">/*函数体开始*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"This is a C program.\n"</span>);<span class="comment">/*输出语句*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*函数体结束*/</span></span><br></pre></td></tr></table></figure><p>说明：main-主函数名，void-函数类型</p><p>每个C程序必须有一个主函数main，且程序执行首先从main开始，与main函数的位置无关</p><p>{}是函数开始和结束的标志，不可省</p><p>每个C语句以分号结束</p><p>使用标准库函数是应在程序开头添加：#include &lt;stdio.h&gt;</p><h5 id="运行C程序的步骤"><a href="#运行C程序的步骤" class="headerlink" title="运行C程序的步骤"></a>运行C程序的步骤</h5><ul><li>上机输入与编辑源程序</li><li>对源程序进行编译</li><li>与库函数连接</li><li>运行可执行目标程序</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考情分析、复习方法和概述 + 第一章&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>计网5</title>
    <link href="http://yoursite.com/2020/05/07/%E8%AE%A1%E7%BD%915/"/>
    <id>http://yoursite.com/2020/05/07/%E8%AE%A1%E7%BD%915/</id>
    <published>2020-05-07T05:28:03.000Z</published>
    <updated>2021-04-13T14:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数据链路层</strong> 第五节 数据链路层的功能 + 组帧 +差错控制</p><a id="more"></a><h4 id="数据链路层的功能（考纲）"><a href="#数据链路层的功能（考纲）" class="headerlink" title="数据链路层的功能（考纲）"></a>数据链路层的功能（考纲）</h4><p>数据链路层（小秘） 使用下层 物理层的服务，并提供服务给上层 网络层。这三层是通信子网；主要作用，加强物理层传输原始比特流的功能，将物理层（傻子）提供的可能出差错的链路改造成逻辑上无差错的数据链路，使之对网络层（boss）表现为一条无差错链路。</p><h5 id="为网络层提供服务"><a href="#为网络层提供服务" class="headerlink" title="为网络层提供服务"></a>为网络层提供服务</h5><ol><li><p>无确认的无连接服务</p><p>机器发送数据帧时不需先建立链路连接，收到帧也不用确认，对丢失的帧，链路层也不重发（真随缘发送）。适用于实时通信或误码率较低的通信信道，如以太网：通信质量好，有线传输链路。</p></li><li><p>有确认的无连接服务</p><p>机器发送数据帧时不需先建立链路连接，收到帧要发回确认。丢失帧重传。误码率高的比如无线传输。</p></li><li><p>有确认的面向连接服务</p><p>帧传输三阶段：建立数据链、传输帧、释放数据链路。</p><p>注：不存在无确认的面向连接服务。</p></li></ol><h5 id="链路管理"><a href="#链路管理" class="headerlink" title="链路管理"></a>链路管理</h5><p>数据链路层连接的“建立、维持、释放”过程称为链路管理。主要用于有确认的面向连接服务。</p><h5 id="帧定界、帧同步与透明传输"><a href="#帧定界、帧同步与透明传输" class="headerlink" title="帧定界、帧同步与透明传输"></a>帧定界、帧同步与透明传输</h5><p><a href="https://blog.csdn.net/cainv89/article/details/50603699?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">https://blog.csdn.net/cainv89/article/details/50603699?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p><p>我们需要对网络层（boss）的<strong>分组封装成帧</strong>，以帧传输。将一段数据的<strong>前后</strong>分别添加首部、尾部就构成帧。首尾部包含很多<strong>控制信息</strong>，主要作用是确定帧的界限，即<strong>帧定界</strong>。<strong>帧同步</strong>：接收方能从接收到的二进制比特流中区分出帧的起始与终止。</p><p><strong>透明传输</strong>：不管所传输的数据是什么样的比特组合，都应当能在链路上传送。</p><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>控制发送速率。（大题必考！！！后面会有流量控制与可靠传输机制详细讲解，<u>停等协议</u>和<u>滑动窗口协议</u>）。发送方发送速度大于接收方接收速度，控制发送方的发送速率。</p><h4 id="组帧（考纲）"><a href="#组帧（考纲）" class="headerlink" title="组帧（考纲）"></a>组帧（考纲）</h4><p>将比特组合成帧，以帧为单位传输，为了在出错时只发送帧，而不是全部比特数据。</p><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><p>差错检测防止差错的无效数据帧，浪费网络资源</p><h5 id="检错编码"><a href="#检错编码" class="headerlink" title="检错编码"></a>检错编码</h5><h5 id="纠错编码"><a href="#纠错编码" class="headerlink" title="纠错编码"></a>纠错编码</h5><p>海明码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;数据链路层&lt;/strong&gt; 第五节 数据链路层的功能 + 组帧 +差错控制&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研803" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94803/"/>
    
  </entry>
  
  <entry>
    <title>计网4</title>
    <link href="http://yoursite.com/2020/05/07/%E8%AE%A1%E7%BD%914/"/>
    <id>http://yoursite.com/2020/05/07/%E8%AE%A1%E7%BD%914/</id>
    <published>2020-05-07T04:25:30.000Z</published>
    <updated>2021-04-13T14:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物理层</strong> 第四节 传输介质与物理层设备</p><a id="more"></a><h4 id="双绞线、同轴电缆、光纤与无线传输介质"><a href="#双绞线、同轴电缆、光纤与无线传输介质" class="headerlink" title="双绞线、同轴电缆、光纤与无线传输介质"></a>双绞线、同轴电缆、光纤与无线传输介质</h4><p>传输介质，又称传输媒体，是发送设备和接收设备之间的物理通路，并非物理层的设备！！！。传输介质可分为<strong>导向传输介质</strong>和<strong>非导向传输介质</strong>。导向传输：电磁波被导向沿着固体媒介(铜线或光纤)传播；非导向传输：传输介质是空气、真空或海水。</p><h5 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h5><ol><li>最常用的古老传输介质，两根采用一定规则并排绞合、相互绝缘的铜导线组成。</li><li>绞合减少对相邻导线电磁干扰。无层的双绞线是(UTP)，双绞线外面加一层金属丝编织成的屏蔽层，这就是屏蔽双绞线(STP)。</li><li>双绞线便宜，在局域网和传统电话网中普遍使用。双绞线带宽取决于铜线粗细和传输距离。模拟传输和数字传输都可以使用双绞线，通信距离一般几千米到数十千米。距离太远，模拟传输需要用<strong>放大器放大</strong>衰减信号；数字传输需要用<strong>中继器</strong>将失真的信号<strong>整形</strong>。</li></ol><h5 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h5><ol><li>同轴电缆由内导体、绝缘层、网状编织层屏蔽层和塑料外层构成。共用一个轴心。按特性阻抗数值的不同，分为两类：基带同轴电缆传输基带数字信号，用于局域网；宽带同轴电缆传输宽带信号，用于有线电视系统。</li><li>外导体屏蔽层，良好抗干扰特性，广泛用于传输较高速率的数据，其传输距离更远，比双绞线贵。</li></ol><h5 id="光纤（考纲）"><a href="#光纤（考纲）" class="headerlink" title="光纤（考纲）"></a>光纤（考纲）</h5><ol><li>光纤通信利用光导纤维（简称光纤）传递光脉冲来通信。有光脉冲为1，无光脉冲为0。光纤通信系统的带宽范围极大。</li><li>光纤由<strong>纤芯</strong>（实心）和包层组成，光波通过纤芯进行传导，包层较纤芯有较低的折射率。当光纤从高折射率介质射向低折射率介质，其折射角大于入射角。如果入射角足够大，会形成全反射，即光线碰到包层时会折射回纤芯，这个过程不断重复，光沿着光纤传输下去。</li><li>两种光纤：<ul><li><strong>多模光纤</strong>：入射角不同，形成多束光纤传输。光源是发光二极管。光脉冲在多模光纤传输逐渐展宽，易失真，只适合短距离传输。</li><li><strong>单模光纤</strong>：光纤直径减小到一个光波长度，光纤就像一根波导，可使光纤一直向前传播，不会产生过多反射。光源是定向性好的激光二极管，制作成本高，衰减小，适合远距离传输。</li></ul></li></ol><p>光纤特点：</p><ul><li>传输损耗小，中继距离长，对远距离传输特别经济</li><li>抗雷电和电磁干扰好</li><li>无串音干扰，保密性好</li><li>体积小，重量轻</li></ul><h5 id="无线传输介质"><a href="#无线传输介质" class="headerlink" title="无线传输介质"></a>无线传输介质</h5><ol><li>无线电波：信号向所有方向扩散；广泛用于通信领域：无线手机通信、计算机网络中的无线局域网（WLAN）等。</li><li>微波、红外线和激光：高频率带宽；信号固定方向传播，直线；卫星通信使用微波信号。</li></ol><h4 id="物理层接口的特性"><a href="#物理层接口的特性" class="headerlink" title="物理层接口的特性"></a>物理层接口的特性</h4><p>主要任务：确定与传输媒体的接口有关的一些特性：</p><p>机械特性、电器特性、功能特性、规程特性</p><h4 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h4><ol><li>中继器，又称转发器。主要功能，将信号整形并放大再转发出去，信号再生。放大器是放大模拟信号，中继器整形数字信号。</li><li>具有5-4-3规则</li></ol><h4 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h4><ol><li>集线器（Hub）实质上是一个多端口的中继器，也工作在物理层。由Hub组成的网络是共享式网络，但逻辑上仍是一个总线网。Hub只能在半双工状态下工作。</li><li>对信号进行放大后发到其他所有端口。</li><li>星型拓扑结构的中间就是集线器。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物理层&lt;/strong&gt; 第四节 传输介质与物理层设备&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研803" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94803/"/>
    
  </entry>
  
  <entry>
    <title>计网3</title>
    <link href="http://yoursite.com/2020/05/06/%E8%AE%A1%E7%BD%913/"/>
    <id>http://yoursite.com/2020/05/06/%E8%AE%A1%E7%BD%913/</id>
    <published>2020-05-06T12:22:33.000Z</published>
    <updated>2021-04-13T14:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物理层</strong> 第三节 通信基础：基本概念、奈奎斯特定理香浓定理、编码与调制</p><a id="more"></a><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="数据、信号与码元"><a href="#数据、信号与码元" class="headerlink" title="数据、信号与码元"></a>数据、信号与码元</h5><p>通信的目的是传递消息。</p><ol><li><strong>数据</strong>是指传送信息的实体。<strong>信号</strong>是指数据的<strong>电气或电磁</strong>表现，是数据在传输过程中的存在形式。数据和信号都可以用“模拟的”和“数字的”来修饰。<ul><li>连续变化的数据（或信号）称为<strong>模拟数据</strong>（模拟信号）；</li><li>取值仅允许为有限的几个离散数值的数据（或信号）称为<strong>数字数据</strong>（数字信号）；</li></ul></li><li>数据的传输方式可分为串行传输、并行传输。<ul><li><strong>串行传输</strong>是指：一个一个的比特按照时间顺序传输（对经济考虑，远距离通信通常采用串行传输）；</li><li><strong>并行传输</strong>是指：多个比特通过多条通信信道同时传输；速度快，费用高，适用于近距离，用于计算机内部数据传输；</li></ul></li><li><strong>码元</strong>：是指用一个固定时长的信号波形（数字脉冲）表示一位k进制数字，代表不同离散数值的基本波形，是<strong>数字通信</strong>中<strong>数字信号</strong>的计量单位，这个时长内的信号称为k进制码元，而该<strong>时长</strong>称为<strong>码元宽度</strong>。1码元可以携带多个比特的信息量。eg：在使用二进制编码时，只有两种不同的码元：一种代表0状态，一种代表1状态；在使用四进制编码时，2bit位可以表示四种码元：00 01 10 11；使用n进制编码，就有n中码元，即有 <em>2的x次方 = n</em> ，x个bit来表示。</li></ol><h5 id="信源、信道与信宿"><a href="#信源、信道与信宿" class="headerlink" title="信源、信道与信宿"></a>信源、信道与信宿</h5><ol><li><strong>数据通信</strong>是指数字计算机或其他数字终端之间的通信。一个数据通信系统主要划分为信源、信道和信宿三部分。</li><li><strong>信源</strong>是产生和发送数据的源头。<strong>信宿</strong>是接收数据的终点，它们通常都是计算机或其他数字终端转置。需要通过<strong>变换器</strong>（调制解调器）转换成合适于在<strong>信道</strong>上传输的信号，也需要反转换器转成原始信息。</li><li>信道与电路不等同，<strong>信道</strong>是信号的<strong>传输媒介</strong>。<strong>噪声源</strong>是信道上的噪声（对信号的干扰）。</li><li>信道分为<strong>模拟信道</strong>和<strong>数字信道</strong>；也可分为<strong>无线信道</strong>和<strong>有线信道</strong>。</li><li>信道上传送信号有基带信号和宽带信号。<ul><li><strong>基带信号</strong>：将数字信号 1 和 0 直接用不同电压表示，然后传到数字信道上（基带传输）；</li><li><strong>宽带信号</strong>：将基带信号进行调制形成频分复用模拟信号，然后传到模拟信道上（宽带传输）；</li></ul></li><li>通信双方信息交互方式，可分为三种基本方式：<ul><li>单工通信：无线电、广播、电视广播</li><li>半双工：任何一方不能同时发送和接收信息</li><li>全双工</li></ul></li><li>信道的极限容量是指信道的<strong>最高码元传输速率</strong>或信道的极限信息传输速率。</li></ol><h5 id="速率、波特和带宽"><a href="#速率、波特和带宽" class="headerlink" title="速率、波特和带宽"></a>速率、波特和带宽</h5><ol><li><p>速率也称数据率，指数据传输速率，表示单位时间内传输的数据量<em>（s = vt）</em>。</p><ul><li><p><strong>码元传输速率</strong>。又称码元速率、波形速率。表示单位时间数字通信系统所传码元个数（也是脉冲个数或信号变化的次数），单位波特Baud。1 Baud = 1码元 / S。码元可多进制；码元速率与进制数无关。</p></li><li><p><strong>信息传输速率</strong>。又称信息速率，比特率。表示单位时间内数字通信系统传输的二进制码元个数（即比特数），单位比特/秒（b/s）。</p></li><li><p>若一个码元携带n比特的信息量，则M波特率的码元传输速率所对应的信息传输速率为 Mn b/s。</p><p>eg：若一码元携带2bit信息量，则5Baud的码元传输速率对应的信息传输速率为：<u>10 b/s</u>。</p><p>一码元携带2bit，即2*5=10 b/s。</p></li></ul></li><li><p>带宽原指具有的频带宽度，单位hz。在实际网络中，带宽表示最高数据率 b/s。</p></li></ol><h4 id="奈奎斯特定理与香浓定理（考纲）"><a href="#奈奎斯特定理与香浓定理（考纲）" class="headerlink" title="奈奎斯特定理与香浓定理（考纲）"></a>奈奎斯特定理与香浓定理（考纲）</h4><h5 id="奈斯定理"><a href="#奈斯定理" class="headerlink" title="奈斯定理"></a>奈斯定理</h5><ol><li><p>奈奎斯特（Nyquist）定理又称奈氏准则，在理想低通（没有噪声、宽带有限）的信道，极限码元传输速率为2W波特。W是理想低通信道的带宽，单位Hz。若用V表示每个码元离散电平的数目（即多少种不同的码元，即多少进制），则<strong>极限数据率</strong>为：</p><p><u><em>理想低通信道下的极限传输率 = 2Wlog2V b/s</em></u></p></li><li><p>奈氏准则结论：</p><ul><li>任何信道，码元传输速率有上限。超过上限会出现码间串扰。</li><li>信道频带越宽（通过的信号高频分量越多），就可用更高的速率进行码元的有效传输。</li><li>给出了码元传输速率的限制，但未限制每个码元可以对应多少个二进制位。</li></ul><p>提高数据传输速率，就设法使每个码元携带更多个比特的信息量，此时需要采用多元制的调制方法。</p></li></ol><h5 id="香浓定理"><a href="#香浓定理" class="headerlink" title="香浓定理"></a>香浓定理</h5><ol><li><p>香浓（Shannon）定理给出了 带宽受限 且 有高斯白噪音干扰 的信道极限数据传输率，可以做到不产生误差。定理定义为：</p><p><u><em>信道的极限数据传输率 = Wlog2（1+S/N） b/s</em></u></p><p>（W为信道带宽，S/N为信噪比；S为传输信号平均功率，N为信道内部高斯噪声功率）</p><p>单位转换：<u><em>信噪比 = 10log10（S/N）dB</em></u></p></li><li><p>香浓定理结论：</p><ul><li>信道带宽或信道中的信噪比越大，信息极限传输速率越高。</li><li>对一定的传输宽带和一定的噪声比，信息传输速率的上限是确定的。</li><li>只要信息的传输速率低于极限传输速率，就能找方法实现无差错的传输。</li><li>香浓定理得出信息极限传输速率，实际要低很多。</li></ul><p>若S/N没有上限，那么极限信息传输速率也没有上限。虽然实际信噪比有限制的。</p><p>限制了一个码元对应的二进制位数。</p></li></ol><h4 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h4><p>编码 –&gt;数字信号</p><p>调制 –&gt;模拟信号</p><h5 id="数字数据编码为数字信号（考纲）"><a href="#数字数据编码为数字信号（考纲）" class="headerlink" title="数字数据编码为数字信号（考纲）"></a>数字数据编码为数字信号（考纲）</h5><ol><li><p>归零编码</p></li><li><p>非归零编码</p></li><li><p>反向非归零编码</p></li><li><p>曼彻斯特编码（考纲）</p><p><strong>注意</strong>：以太网使用的编码方式就是 曼彻斯特编码。</p></li><li><p>查分曼彻思编码（考纲）</p></li></ol><h5 id="数字数据调制为模拟信号（考纲）"><a href="#数字数据调制为模拟信号（考纲）" class="headerlink" title="数字数据调制为模拟信号（考纲）"></a>数字数据调制为模拟信号（考纲）</h5><p>发送端数字数据调制为模拟信号在模拟信道上传输，在接收端将模拟信号还原为数字信号。对应调制解调器的调制和解调过程。</p><ol><li>调幅</li><li>调频</li><li>调相</li><li>调幅+调相</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物理层&lt;/strong&gt; 第三节 通信基础：基本概念、奈奎斯特定理香浓定理、编码与调制&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研803" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94803/"/>
    
  </entry>
  
  <entry>
    <title>计网2</title>
    <link href="http://yoursite.com/2020/05/06/%E8%AE%A1%E7%BD%912/"/>
    <id>http://yoursite.com/2020/05/06/%E8%AE%A1%E7%BD%912/</id>
    <published>2020-05-06T11:03:33.000Z</published>
    <updated>2021-04-13T14:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述</strong> 第二节 计算机网络体系结构与参考模型</p><a id="more"></a><h4 id="计算机网络分层结构"><a href="#计算机网络分层结构" class="headerlink" title="计算机网络分层结构"></a>计算机网络分层结构</h4><ol><li><p>我们把计算机网络的各层及其协议的集合 称为<strong>网络的体系结构</strong>，是从<strong>功能</strong>上描述计算机网络结构，是计算机网络中的层次、各层的协议及层间接口的集合。体系结构是抽象的，而实现是具体的。</p></li><li><p>分成的五个基本原则：</p><ul><li><p>每层都实现一种相对独立功能，降低大系统复杂度</p></li><li><p>各层之间界面自然清晰，易于理解，相互交流尽可能少</p></li><li><p>各层采用最合适的技术来实现</p></li><li><p>保持下层对上传的独立性，下层单项提供上层服务</p></li><li><p>整个分层结构促进标准化工作</p></li></ul></li><li><p>在计网分层结构中，第n层中的活动元素通常称为<strong>n层实体</strong>。不同及其上的同一层称为<strong>对等层</strong>，同一层的实体称为<strong>对等实体</strong>。n 提供服务给 n+1层。</p></li><li><p>在计网分层结构中，每个报文都分为两部分：数据部分 SDU 和控制信息部分 PCI，SDU+PCI = PDU</p></li><li><p>服务数据单元（SDU）、协议控制信息（PCI）、协议数据单元（PDU）；在各层间传输数据时，把从第n+1层收到的PDU作为第n层的SDU，加上第n层的PCI，变成了第n层的PDU，交给第n-1层作为SDU发送，接收方接收时做相反的处理。</p></li><li><p>物理层的PDU称为<strong>比特</strong>；链路层的PDU称为<strong>帧</strong>、网络层的PDU称为<strong>分组</strong>、传输层的PDU称为<strong>报文</strong>；</p></li></ol><h4 id="计算机网络的协议、接口、服务的概念"><a href="#计算机网络的协议、接口、服务的概念" class="headerlink" title="计算机网络的协议、接口、服务的概念"></a>计算机网络的协议、接口、服务的概念</h4><h5 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h5><ol><li>协议，就是规则的集合。为网络中的数据交换建立的规则、标准、约定称为<strong>网络协议</strong>（Network Protocol）；控制两个或多个对等实体进行通信的规则集合，是<strong>水平的</strong>。不对等实体之间是没有协议的。</li><li>协议由<strong>语法</strong>、<strong>语义</strong>和<strong>同步</strong>三部分组成。语法规定传输数据的格式（比如二进制 01）；语义规定了所要完成的功能，需要发出何种控制信息、完成何种动作、答复；同步规定了执行各操作的条件、时序关系等。</li><li>一个完整的协议通常具有线路管理（建立、释放连接）、差错控制、数据转换等功能。</li></ol><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>接口时同一结点内相邻两层间交换信息的连接点，是一个系统内部的规定。每层只能为紧邻的层次之间定义接口，不能跨层定义接口。服务访问点（Service Access Point , SAP），服务是通过SAP提供给上层使用的。每个SAP都有一个能够表示它的地址。SAP是一个抽象概念，实际上是一个逻辑接口。</p><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><p>服务是指下层为紧邻的上层提供的功能调用，是<strong>垂直的</strong>。对等实体在协议的控制下，使得本层能为上层提供服务。OSI中称为服务原语：请求、指示、响应、证实。</p><p>计算机网络提供的服务可按照以下分类</p><ul><li>面向连接服务与无连接服务</li><li>可靠服务和不可靠服务</li><li>有应答服务和无应答服务</li></ul><h4 id="ISO-OSI参考模型和TCP-IP模型（考纲）"><a href="#ISO-OSI参考模型和TCP-IP模型（考纲）" class="headerlink" title="ISO/OSI参考模型和TCP/IP模型（考纲）"></a>ISO/OSI参考模型和TCP/IP模型（考纲）</h4><p>目的：支持异构网络系统的互联互通。</p><h5 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h5><p>国际标准化组织ISO提出的网络体系结构模型，称为开放系统互联参考模型OSI/RM，简称为OSI参考模型，有7层。</p><img src="/2020/05/06/%E8%AE%A1%E7%BD%912/OSI%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg" class><p>总结下：</p><ol><li>物理层：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流(就是由1、0转化为电流强弱来进行传输，到达目的地后再转化为1、0，也就是我们常说的数模转换与模数转换)。这一层的数据叫做比特。</li><li>数据链路层：定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。</li><li>网络层：在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。</li><li>传输层：定义了一些传输数据的协议和端口号(WWW端口80等)，如：TCP(传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据)，UDP(用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。</li><li>会话层：通过传输层(端口号：传输端口与接收端口)建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求(设备之间需要互相认识可以是IP也可以是MAC或者是主机名)。</li><li>表示层：可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换吗(EBCDIC)，而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。</li><li>应用层：是最靠近用户的OSI层。这一层为用户的应用程序(例如电子邮件、文件传输和终端仿真)提供网络服务。</li></ol><h5 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h5><p>事实标准 4层</p><img src="/2020/05/06/%E8%AE%A1%E7%BD%912/TCPIP%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg" class><p>总结下：</p><ol><li>TCP/IP参考模型是首先由ARPANET所使用的<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=301274&ss_c=ssc.citiao.link">网络体系结构</a>。这个体系结构在它的两个主要协议出现以后被称为TCP/IP参考模型(TCP/IP Reference Model)。这一网络协议共分为四层：<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=166609564&ss_c=ssc.citiao.link">网络访问层</a>、<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=62691577&ss_c=ssc.citiao.link">互联网层</a>、传输层和应用层</li><li>TCP/IP协议不是 TCP和 IP这两个协议的合称，而是指因特网整个TCP/IP协议族。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt; 第二节 计算机网络体系结构与参考模型&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研803" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94803/"/>
    
  </entry>
  
  <entry>
    <title>计网1</title>
    <link href="http://yoursite.com/2020/05/06/%E8%AE%A1%E7%BD%911/"/>
    <id>http://yoursite.com/2020/05/06/%E8%AE%A1%E7%BD%911/</id>
    <published>2020-05-06T10:10:19.000Z</published>
    <updated>2021-04-13T14:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述</strong> 第一节 计算机网络体系结构的概述</p><a id="more"></a><h4 id="计算机网络的定义（考纲）"><a href="#计算机网络的定义（考纲）" class="headerlink" title="计算机网络的定义（考纲）"></a>计算机网络的定义（考纲）</h4><p>计算机网络就是一些 <strong>互联的</strong>、<strong>自治的</strong>计算机系统的集合。计算机网络是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现<strong>资源共享</strong>、<strong>信息传递</strong>的系统。</p><h4 id="计算机网络组成"><a href="#计算机网络组成" class="headerlink" title="计算机网络组成"></a>计算机网络组成</h4><img src="/2020/05/06/%E8%AE%A1%E7%BD%911/%E8%AE%A1%E7%BD%91%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.svg" class><h4 id="计算机网络功能（考纲）"><a href="#计算机网络功能（考纲）" class="headerlink" title="计算机网络功能（考纲）"></a>计算机网络功能（考纲）</h4><p>主要有以下五大功能：</p><ol><li><strong>数据通信</strong>：最基本最重要的功能，实现联网计算机之间的各种信息的传输，并将分散在不同地理位置的计算机联系起来，统一分配、控制、管理。</li><li><strong>资源共享</strong>：资源共享可以是软件共享、数据共享、硬件共享。</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡：将工作任务均衡地分配给计算机网络中的各台计算机。</li></ol><h4 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h4><h5 id="按分布范围分类"><a href="#按分布范围分类" class="headerlink" title="按分布范围分类"></a>按分布范围分类</h5><p>后面会有详细讲解</p><ol><li>广域网（WAN）：远程，因特网核心</li><li>城域网（MAN）：大多采用以太网技术</li><li>局域网（LAN）：传统上，局域网使用广播技术、而广域网使用交换技术；校园网</li><li>个人区域网（PAN）：平板、手机</li></ol><h5 id="按传输技术分类"><a href="#按传输技术分类" class="headerlink" title="按传输技术分类"></a>按传输技术分类</h5><ol><li>广播式网络：所有互联计算机共享一个公共通信信道。局域网基本采用广播式通信技术，广域网中无线、卫星通信网络也采用广播式网络。</li><li>点对点网络：每条物理线路连接一对计算机。</li></ol><h5 id="拓扑结构分类（考纲）"><a href="#拓扑结构分类（考纲）" class="headerlink" title="拓扑结构分类（考纲）"></a>拓扑结构分类（考纲）</h5><p>网络拓扑结构是指由网中<strong>结点</strong>（<u>路由器</u>、<u>主机</u>等）与通信设备（网线）之间的几何关系表示的网络结构，主要指通信子网的拓扑结构。</p><p>（理解每一个拓扑结构的基本概念）：总线型、星型、环形、网状型网络；其中总线型、星型、环形多用于局域网、网状形多用于广域网。</p><h5 id="按使用者分类"><a href="#按使用者分类" class="headerlink" title="按使用者分类"></a>按使用者分类</h5><p>公用网、专用网</p><h5 id="按交换技术分类"><a href="#按交换技术分类" class="headerlink" title="按交换技术分类"></a>按交换技术分类</h5><p>电路交换、报文交换、分组交换</p><h5 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类"></a>按传输介质分类</h5><p>有线无线</p><h4 id="计算机网络性能指标（考纲）"><a href="#计算机网络性能指标（考纲）" class="headerlink" title="计算机网络性能指标（考纲）"></a>计算机网络性能指标（考纲）</h4><table><thead><tr><th>性能指标</th><th>解释</th></tr></thead><tbody><tr><td>带宽</td><td>“最高数据率” 单位比特/秒（b/s）</td></tr><tr><td>时延</td><td>①.发送时延（传输时延）：<em>发送时延 = 分组长度 / 信道宽度</em>；<br>②.传播时延：电磁波在信道中传播一定的距离需要花费的时间：<em>传播时延 = 信道长度 / 电磁波在信道上的传播速率</em>；<br>③.处理时延 ④.排队时延。<br>总时延：为四个时延相加。</td></tr><tr><td>时延带宽积</td><td><em>时延带宽积 = 传播时延*信道带宽</em></td></tr><tr><td>往返时延</td><td>Round-Trip Time ，RTT，发送端发送数据开始，到发送端收到接收端的确认，总共经历的时延。</td></tr><tr><td>吞吐量</td><td>Throughput，单位时间内通过某个网络（或信道、接口）的数据率，吞吐量受网络额定速率的限制。</td></tr><tr><td>速率</td><td>数据率、比特率；单位为b/s 比特/秒；kb/s、Mb/s、Gb/s 。</td></tr><tr><td>信道利用率</td><td>信道利用率 = 有数据通过时间 / （有+无）数据通过时间</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt; 第一节 计算机网络体系结构的概述&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研笔记" scheme="http://yoursite.com/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="考研803" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94803/"/>
    
  </entry>
  
  <entry>
    <title>Mockjs</title>
    <link href="http://yoursite.com/2020/04/07/Mockjs/"/>
    <id>http://yoursite.com/2020/04/07/Mockjs/</id>
    <published>2020-04-07T06:57:50.000Z</published>
    <updated>2020-04-07T07:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>mockjs 生成随机数据</p><a id="more"></a><blockquote><p>所有内容資料來自<a href="https://www.csdn.net/"><img src="https://csdnimg.cn/cdn/content-toolbar/csdn-logo_.png?v=20190924.1" alt="img"></a></p></blockquote><p>前后端分离趋势，前端负责数据展示、页面动态效果等，后端负责编写应用程序接口，功页面、第三方等调用。有很多情况是，前端已经写好页面，一直等待后端接口的联调。所以现在就有造价数据的工具mockjs</p><p><strong>jquery 中 使用 mockjs来拦截ajax请求，并返回假数据。</strong></p><h5 id="引入mockjs"><a href="#引入mockjs" class="headerlink" title="引入mockjs"></a>引入mockjs</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字符串</span></span><br><span class="line">Mock.mock(<span class="string">'/api/data'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">'string|3'</span>: <span class="string">'*'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定范围的整数</span></span><br><span class="line">Mock.mock(<span class="string">'/api/getInteger'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">'a|1-100'</span>: <span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机个数的对象</span></span><br><span class="line">Mock.mock(<span class="string">'/api/getObject'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">'brand|1-3'</span>: &#123;</span><br><span class="line">            a: <span class="string">'京东'</span>,</span><br><span class="line">            b: <span class="string">'国美'</span>,</span><br><span class="line">            c: <span class="string">'苏宁'</span>,</span><br><span class="line">            d: <span class="string">'当当'</span>,</span><br><span class="line">            e: <span class="string">'天猫'</span>,</span><br><span class="line">            f: <span class="string">'淘宝'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机数组</span></span><br><span class="line">Mock.mock(<span class="string">'/api/getArr'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">'data|1-10'</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'张三'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机字符</span></span><br><span class="line">Mock.mock(<span class="string">'/api/getRandom1'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">'random1'</span>: <span class="regexp">/[a-z]&#123;2&#125;[A-Z]&#123;2&#125;[0-9]/</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机字符</span></span><br><span class="line">Mock.mock(<span class="string">'/api/getRandom2'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;<span class="attr">random2</span>: <span class="string">'@string("lower", 5)'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回UUID</span></span><br><span class="line">Mock.mock(<span class="string">'/api/getUUID'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'uuid'</span>: Mock.Random.id()&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"id|+1"</span>: <span class="number">1</span>, <span class="comment">//id的递增</span></span><br><span class="line"><span class="string">"name"</span>: <span class="string">"@cname"</span>, <span class="comment">// 姓名</span></span><br><span class="line"><span class="string">"email"</span>: <span class="string">"@email"</span>, <span class="comment">//邮箱</span></span><br><span class="line"><span class="string">"mobile"</span>: <span class="regexp">/^(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/</span>, <span class="comment">//生成手机11位号  可以使用正则表达式</span></span><br><span class="line"><span class="string">"sex"</span>: <span class="string">"@boolean, // 随机boolean</span></span><br><span class="line"><span class="string">"</span>avatar<span class="string">":"</span>@image<span class="string">" // 图片</span></span><br><span class="line"><span class="string">"</span>avatar<span class="string">":"</span>@image(<span class="string">'50x50'</span>,<span class="string">'red'</span>,<span class="string">'#fff'</span>,<span class="string">'文字‘)"</span></span><br></pre></td></tr></table></figure><h5 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Boolean"</span>: <span class="string">"@boolean"</span>, <span class="comment">// 布尔值</span></span><br><span class="line"><span class="string">"natural"</span>: <span class="string">"@natural"</span>, <span class="comment">// natural( min, max )</span></span><br><span class="line"><span class="string">"integer"</span>: <span class="string">"@integer"</span>, <span class="comment">// integer( min, max )</span></span><br><span class="line"><span class="string">"float"</span>: <span class="string">"@float(22,99,1,2)"</span>, <span class="comment">// float( min, max, dmin, dmax )</span></span><br><span class="line"><span class="string">"string"</span>: <span class="string">"@string"</span>, <span class="comment">//string(type,min,max) lower小写，upper大写，number数字，symbol符号，</span></span><br><span class="line"><span class="string">"range"</span>: <span class="string">"@range"</span>, <span class="comment">//range( start, stop, step ) step为间隔为，最后返回值为数组</span></span><br></pre></td></tr></table></figure><h5 id="時間"><a href="#時間" class="headerlink" title="時間"></a>時間</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"date"</span>: <span class="string">"@date"</span>, <span class="comment">// 日期</span></span><br><span class="line"><span class="string">"time"</span>: <span class="string">"@time"</span>, <span class="comment">// 时间</span></span><br><span class="line"><span class="string">"dataTime"</span>: <span class="string">"@datetime"</span>, <span class="comment">// 日期+时间</span></span><br><span class="line"><span class="string">"Now"</span>: <span class="string">"@now"</span>, <span class="comment">// 当前的日期时间</span></span><br></pre></td></tr></table></figure><h5 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h5><blockquote><p>凡是@后加c就是为中文；例如name为英文，cname则是中文</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"paragraph"</span>: <span class="string">"@cparagraph"</span>, <span class="comment">// 段落</span></span><br><span class="line"><span class="string">"title"</span>:<span class="string">"@ctitle(1,10)"</span>,<span class="comment">//标题，长度为1-10</span></span><br><span class="line"><span class="string">"sentence"</span>: <span class="string">"@csentence"</span>, <span class="comment">//句子</span></span><br><span class="line"><span class="string">"first"</span>: <span class="string">"@cfirst"</span>, <span class="comment">//姓氏</span></span><br></pre></td></tr></table></figure><h5 id="地方"><a href="#地方" class="headerlink" title="地方"></a>地方</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"region"</span>: <span class="string">"@region"</span>, <span class="comment">//方位</span></span><br><span class="line"><span class="string">"province"</span>: <span class="string">"@province"</span>, <span class="comment">//省份 </span></span><br><span class="line"><span class="string">"city"</span>: <span class="string">"@city"</span>, <span class="comment">// 城市 +(true)，可以获取到上一级，例如：@city(true) 可以获取到省市</span></span><br></pre></td></tr></table></figure><h5 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"city|2-4"</span>: &#123;</span><br><span class="line">    <span class="string">"110000"</span>: <span class="string">"北京市"</span>,</span><br><span class="line">    <span class="string">"120000"</span>: <span class="string">"天津市"</span>,</span><br><span class="line">    <span class="string">"130000"</span>: <span class="string">"河北省"</span>,</span><br><span class="line">    <span class="string">"140000"</span>: <span class="string">"山西省"</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="string">"city|1"</span>: [</span><br><span class="line">    <span class="string">"北京市"</span>,</span><br><span class="line">    <span class="string">"天津市"</span>,</span><br><span class="line">    <span class="string">"河北省"</span>,</span><br><span class="line">    <span class="string">"山西省"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mockjs 生成随机数据&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mock" scheme="http://yoursite.com/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>RESTfull</title>
    <link href="http://yoursite.com/2020/04/06/RESTfull/"/>
    <id>http://yoursite.com/2020/04/06/RESTfull/</id>
    <published>2020-04-06T02:26:24.000Z</published>
    <updated>2020-04-06T02:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>RESTfull <em>一种软件架构风格、设计风格</em>，不是标准，提供了一组设计原则和约束条件。</p><a id="more"></a><p>主要用于客户端和服务器交互类软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制。<a href="https://baike.sogou.com/v73300762.htm?fromTitle=RESTful">查看词条</a></p><h5 id="原则条件"><a href="#原则条件" class="headerlink" title="原则条件"></a>原则条件</h5><ol><li>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</li><li>Web应用程序最重要的REST原则是，客户端和服务器之间的交互在请求之间是（http请求）无状态的。客户端到服务器的每一个请求都必须包含理解请求所必需的信息。</li><li>在服务器端，应用程序状态和功能可以分为各种资源。向客户端公开。每个资源都使用 URL 得到一个唯一的地址。所有资源都共享同一的接口，以便客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、PUT、POST和DELETE</li></ol><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>每个URL代表 1 种资源</li><li>客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</li><li>资源的表现形式是 XML 或者 HTML</li><li>客户端与服务端之间的交互请求之间是无状态的。客户端到服务器的每一个请求都必须包含理解请求所必需的信息。</li></ol><h5 id="RESTful架构"><a href="#RESTful架构" class="headerlink" title="RESTful架构"></a>RESTful架构</h5><ol><li><p>RESTful架构是对MVC架构改进后所形成的一种架构，通过使用事先定义好的接口与不同的服务联系起来。在RESTful架构中，浏览器使用POST，DELETE，PUT和GET四种请求方式分别对指定的URL资源进行增删改查操作。因此，RESTful是通过URI实现对资源的管理及访问，具有扩展性强、结构清晰的特点。</p></li><li><p>RESTful架构将服务器分成前端服务器和后端服务器两部分，前端服务器为用户提供无模型的视图；后端服务器为前端服务器提供接口。浏览器向前端服务器请求视图，通过视图中包含的AJAX函数发起接口请求获取模型。</p></li></ol><h5 id="其他概念-更多"><a href="#其他概念-更多" class="headerlink" title="其他概念 (更多)"></a><a href="https://mp.weixin.qq.com/s?src=3&timestamp=1586138856&ver=1&signature=YaSPg7qpu0Qva1*0Fzsibkd*dUmaJaaRaWFCm3-pr1P-9LJdS0n17C0d*v1U1XkrVZ1MzAtvI5I*Euqi3Y9oBTCQGSLdTUalCdtpQVVTXLfAxGBasGoGcxLFxFzqUr7DADEmF*rpU-Hdyd0*7Pmvty3KNdVeA-ilKzurRx4iF5w=">其他概念 (更多)</a></h5><h6 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h6><ol><li>服务器设计接口，应当设计为无状态接口。即服务器端不保存任何与客户端相关的状态上下文信息。 客户端在每次调用接口时，需要提供足够的信息，以供服务器完成操作</li><li>无状态设计中，服务端减少了保存客户端相关上下文数据，因此，一方面服务端能够更加容易实现动态扩展；减少了服务端从故障中恢复的任务量</li><li>但无状态也会带来额外的问题。客户端将需要保存完整的用户状态信息，在每次与服务端交互时可能需要增加与用户状态相关的上下文信息，这样将导致请求数据的重复和增大</li></ol><h6 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h6><ol><li>接口设计中增加缓存策略，服务器可以决定是否可以缓存当前返回的数据。这样 减少服务器被请求的次数，提高网络访问性能</li><li>缓存要谨慎使用，需要缓存什么数据，缓存过期时间等，要根据实际情况设计。</li><li>一般而言，数据字典类数据、修改频率非常低的数据、实时性要求很低的数据等，这些数据可以设计一定的缓存策略，以提高系统运行效率。</li></ol><h6 id="系统分层"><a href="#系统分层" class="headerlink" title="系统分层"></a>系统分层</h6><ol><li><p>横向分层一般可以分为 交互层 、服务层 、数据层 </p></li><li><p>纵向分层则通常会按照不同的业务功能对系统进行切分</p></li></ol><h6 id="统一接口"><a href="#统一接口" class="headerlink" title="统一接口"></a>统一接口</h6><p>​    统一接口，即是不同系统模块之间的调用接口统一规范，使用统一的调用协议，统一的数据格式等。统一接口带来的是系统交互的规范化，接口调用与业务解耦，各模块独立进化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RESTfull &lt;em&gt;一种软件架构风格、设计风格&lt;/em&gt;，不是标准，提供了一组设计原则和约束条件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="rest" scheme="http://yoursite.com/tags/rest/"/>
    
  </entry>
  
</feed>
